// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/interfaces/wsman.go
//
// Generated by this command:
//
//	mockgen -source ./internal/interfaces/wsman.go -destination ./internal/mocks/wsman_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	tls "crypto/tls"
	reflect "reflect"

	authorization "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/authorization"
	environmentdetection "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/environmentdetection"
	ethernetport "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/ethernetport"
	general "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/general"
	managementpresence "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/managementpresence"
	publickey "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/publickey"
	publicprivate "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/publicprivate"
	redirection "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/redirection"
	remoteaccess "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/remoteaccess"
	setupandconfiguration "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/setupandconfiguration"
	timesynchronization "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/timesynchronization"
	tls0 "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/tls"
	userinitiatedconnection "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/userinitiatedconnection"
	wifiportconfiguration "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/amt/wifiportconfiguration"
	concrete "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/cim/concrete"
	credential "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/cim/credential"
	kvm "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/cim/kvm"
	models "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/cim/models"
	wifi "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/cim/wifi"
	hostbasedsetup "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/ips/hostbasedsetup"
	http "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/ips/http"
	ieee8021x "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/ips/ieee8021x"
	optin "github.com/device-management-toolkit/go-wsman-messages/v2/pkg/wsman/ips/optin"
	gomock "go.uber.org/mock/gomock"
)

// MockWSMANer is a mock of WSMANer interface.
type MockWSMANer struct {
	ctrl     *gomock.Controller
	recorder *MockWSMANerMockRecorder
	isgomock struct{}
}

// MockWSMANerMockRecorder is the mock recorder for MockWSMANer.
type MockWSMANerMockRecorder struct {
	mock *MockWSMANer
}

// NewMockWSMANer creates a new mock instance.
func NewMockWSMANer(ctrl *gomock.Controller) *MockWSMANer {
	mock := &MockWSMANer{ctrl: ctrl}
	mock.recorder = &MockWSMANerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWSMANer) EXPECT() *MockWSMANerMockRecorder {
	return m.recorder
}

// AddClientCert mocks base method.
func (m *MockWSMANer) AddClientCert(clientCert string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientCert", clientCert)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddClientCert indicates an expected call of AddClientCert.
func (mr *MockWSMANerMockRecorder) AddClientCert(clientCert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientCert", reflect.TypeOf((*MockWSMANer)(nil).AddClientCert), clientCert)
}

// AddHTTPProxyAccessPoint mocks base method.
func (m *MockWSMANer) AddHTTPProxyAccessPoint(accessInfo string, infoFormat, port int, networkDnsSuffix string) (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHTTPProxyAccessPoint", accessInfo, infoFormat, port, networkDnsSuffix)
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHTTPProxyAccessPoint indicates an expected call of AddHTTPProxyAccessPoint.
func (mr *MockWSMANerMockRecorder) AddHTTPProxyAccessPoint(accessInfo, infoFormat, port, networkDnsSuffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHTTPProxyAccessPoint", reflect.TypeOf((*MockWSMANer)(nil).AddHTTPProxyAccessPoint), accessInfo, infoFormat, port, networkDnsSuffix)
}

// AddMPS mocks base method.
func (m *MockWSMANer) AddMPS(password, mpsAddress string, port int) (remoteaccess.AddMpServerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMPS", password, mpsAddress, port)
	ret0, _ := ret[0].(remoteaccess.AddMpServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMPS indicates an expected call of AddMPS.
func (mr *MockWSMANerMockRecorder) AddMPS(password, mpsAddress, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMPS", reflect.TypeOf((*MockWSMANer)(nil).AddMPS), password, mpsAddress, port)
}

// AddNextCertInChain mocks base method.
func (m *MockWSMANer) AddNextCertInChain(cert string, isLeaf, isRoot bool) (hostbasedsetup.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNextCertInChain", cert, isLeaf, isRoot)
	ret0, _ := ret[0].(hostbasedsetup.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNextCertInChain indicates an expected call of AddNextCertInChain.
func (mr *MockWSMANerMockRecorder) AddNextCertInChain(cert, isLeaf, isRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNextCertInChain", reflect.TypeOf((*MockWSMANer)(nil).AddNextCertInChain), cert, isLeaf, isRoot)
}

// AddPrivateKey mocks base method.
func (m *MockWSMANer) AddPrivateKey(privateKey string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrivateKey", privateKey)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPrivateKey indicates an expected call of AddPrivateKey.
func (mr *MockWSMANerMockRecorder) AddPrivateKey(privateKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrivateKey", reflect.TypeOf((*MockWSMANer)(nil).AddPrivateKey), privateKey)
}

// AddRemoteAccessPolicyRule mocks base method.
func (m *MockWSMANer) AddRemoteAccessPolicyRule(remoteAccessTrigger remoteaccess.Trigger, selectorValue string) (remoteaccess.AddRemoteAccessPolicyRuleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRemoteAccessPolicyRule", remoteAccessTrigger, selectorValue)
	ret0, _ := ret[0].(remoteaccess.AddRemoteAccessPolicyRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRemoteAccessPolicyRule indicates an expected call of AddRemoteAccessPolicyRule.
func (mr *MockWSMANerMockRecorder) AddRemoteAccessPolicyRule(remoteAccessTrigger, selectorValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRemoteAccessPolicyRule", reflect.TypeOf((*MockWSMANer)(nil).AddRemoteAccessPolicyRule), remoteAccessTrigger, selectorValue)
}

// AddTrustedRootCert mocks base method.
func (m *MockWSMANer) AddTrustedRootCert(caCert string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrustedRootCert", caCert)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrustedRootCert indicates an expected call of AddTrustedRootCert.
func (mr *MockWSMANerMockRecorder) AddTrustedRootCert(caCert any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrustedRootCert", reflect.TypeOf((*MockWSMANer)(nil).AddTrustedRootCert), caCert)
}

// AddWiFiSettings mocks base method.
func (m *MockWSMANer) AddWiFiSettings(wifiEndpointSettings wifi.WiFiEndpointSettingsRequest, ieee8021xSettings models.IEEE8021xSettings, wifiEndpoint, clientCredential, caCredential string) (wifiportconfiguration.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWiFiSettings", wifiEndpointSettings, ieee8021xSettings, wifiEndpoint, clientCredential, caCredential)
	ret0, _ := ret[0].(wifiportconfiguration.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWiFiSettings indicates an expected call of AddWiFiSettings.
func (mr *MockWSMANerMockRecorder) AddWiFiSettings(wifiEndpointSettings, ieee8021xSettings, wifiEndpoint, clientCredential, caCredential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWiFiSettings", reflect.TypeOf((*MockWSMANer)(nil).AddWiFiSettings), wifiEndpointSettings, ieee8021xSettings, wifiEndpoint, clientCredential, caCredential)
}

// CommitChanges mocks base method.
func (m *MockWSMANer) CommitChanges() (setupandconfiguration.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitChanges")
	ret0, _ := ret[0].(setupandconfiguration.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitChanges indicates an expected call of CommitChanges.
func (mr *MockWSMANerMockRecorder) CommitChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitChanges", reflect.TypeOf((*MockWSMANer)(nil).CommitChanges))
}

// CreateTLSCredentialContext mocks base method.
func (m *MockWSMANer) CreateTLSCredentialContext(certHandle string) (tls0.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTLSCredentialContext", certHandle)
	ret0, _ := ret[0].(tls0.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTLSCredentialContext indicates an expected call of CreateTLSCredentialContext.
func (mr *MockWSMANerMockRecorder) CreateTLSCredentialContext(certHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTLSCredentialContext", reflect.TypeOf((*MockWSMANer)(nil).CreateTLSCredentialContext), certHandle)
}

// DeleteHTTPProxyAccessPoint mocks base method.
func (m *MockWSMANer) DeleteHTTPProxyAccessPoint(name string) (http.ProxyAccessPointResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHTTPProxyAccessPoint", name)
	ret0, _ := ret[0].(http.ProxyAccessPointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHTTPProxyAccessPoint indicates an expected call of DeleteHTTPProxyAccessPoint.
func (mr *MockWSMANerMockRecorder) DeleteHTTPProxyAccessPoint(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHTTPProxyAccessPoint", reflect.TypeOf((*MockWSMANer)(nil).DeleteHTTPProxyAccessPoint), name)
}

// DeleteKeyPair mocks base method.
func (m *MockWSMANer) DeleteKeyPair(instanceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyPair", instanceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyPair indicates an expected call of DeleteKeyPair.
func (mr *MockWSMANerMockRecorder) DeleteKeyPair(instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPair", reflect.TypeOf((*MockWSMANer)(nil).DeleteKeyPair), instanceID)
}

// DeletePublicCert mocks base method.
func (m *MockWSMANer) DeletePublicCert(instanceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicCert", instanceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicCert indicates an expected call of DeletePublicCert.
func (mr *MockWSMANerMockRecorder) DeletePublicCert(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicCert", reflect.TypeOf((*MockWSMANer)(nil).DeletePublicCert), instanceId)
}

// DeletePublicPrivateKeyPair mocks base method.
func (m *MockWSMANer) DeletePublicPrivateKeyPair(instanceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicPrivateKeyPair", instanceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicPrivateKeyPair indicates an expected call of DeletePublicPrivateKeyPair.
func (mr *MockWSMANerMockRecorder) DeletePublicPrivateKeyPair(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicPrivateKeyPair", reflect.TypeOf((*MockWSMANer)(nil).DeletePublicPrivateKeyPair), instanceId)
}

// DeleteWiFiSetting mocks base method.
func (m *MockWSMANer) DeleteWiFiSetting(instanceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWiFiSetting", instanceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWiFiSetting indicates an expected call of DeleteWiFiSetting.
func (mr *MockWSMANerMockRecorder) DeleteWiFiSetting(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWiFiSetting", reflect.TypeOf((*MockWSMANer)(nil).DeleteWiFiSetting), instanceId)
}

// EnableWiFi mocks base method.
func (m *MockWSMANer) EnableWiFi(enableSync, enableWiFiSharing bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableWiFi", enableSync, enableWiFiSharing)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableWiFi indicates an expected call of EnableWiFi.
func (mr *MockWSMANerMockRecorder) EnableWiFi(enableSync, enableWiFiSharing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWiFi", reflect.TypeOf((*MockWSMANer)(nil).EnableWiFi), enableSync, enableWiFiSharing)
}

// EnumerateTLSSettingData mocks base method.
func (m *MockWSMANer) EnumerateTLSSettingData() (tls0.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnumerateTLSSettingData")
	ret0, _ := ret[0].(tls0.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnumerateTLSSettingData indicates an expected call of EnumerateTLSSettingData.
func (mr *MockWSMANerMockRecorder) EnumerateTLSSettingData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnumerateTLSSettingData", reflect.TypeOf((*MockWSMANer)(nil).EnumerateTLSSettingData))
}

// GenerateKeyPair mocks base method.
func (m *MockWSMANer) GenerateKeyPair(keyAlgorithm publickey.KeyAlgorithm, keyLength publickey.KeyLength) (publickey.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateKeyPair", keyAlgorithm, keyLength)
	ret0, _ := ret[0].(publickey.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKeyPair indicates an expected call of GenerateKeyPair.
func (mr *MockWSMANerMockRecorder) GenerateKeyPair(keyAlgorithm, keyLength any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyPair", reflect.TypeOf((*MockWSMANer)(nil).GenerateKeyPair), keyAlgorithm, keyLength)
}

// GeneratePKCS10RequestEx mocks base method.
func (m *MockWSMANer) GeneratePKCS10RequestEx(keyPair, nullSignedCertificateRequest string, signingAlgorithm publickey.SigningAlgorithm) (publickey.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePKCS10RequestEx", keyPair, nullSignedCertificateRequest, signingAlgorithm)
	ret0, _ := ret[0].(publickey.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePKCS10RequestEx indicates an expected call of GeneratePKCS10RequestEx.
func (mr *MockWSMANerMockRecorder) GeneratePKCS10RequestEx(keyPair, nullSignedCertificateRequest, signingAlgorithm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePKCS10RequestEx", reflect.TypeOf((*MockWSMANer)(nil).GeneratePKCS10RequestEx), keyPair, nullSignedCertificateRequest, signingAlgorithm)
}

// GetConcreteDependencies mocks base method.
func (m *MockWSMANer) GetConcreteDependencies() ([]concrete.ConcreteDependency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcreteDependencies")
	ret0, _ := ret[0].([]concrete.ConcreteDependency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcreteDependencies indicates an expected call of GetConcreteDependencies.
func (mr *MockWSMANerMockRecorder) GetConcreteDependencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcreteDependencies", reflect.TypeOf((*MockWSMANer)(nil).GetConcreteDependencies))
}

// GetCredentialRelationships mocks base method.
func (m *MockWSMANer) GetCredentialRelationships() (credential.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialRelationships")
	ret0, _ := ret[0].(credential.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialRelationships indicates an expected call of GetCredentialRelationships.
func (mr *MockWSMANerMockRecorder) GetCredentialRelationships() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialRelationships", reflect.TypeOf((*MockWSMANer)(nil).GetCredentialRelationships))
}

// GetEnvironmentDetectionSettings mocks base method.
func (m *MockWSMANer) GetEnvironmentDetectionSettings() (environmentdetection.EnvironmentDetectionSettingDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentDetectionSettings")
	ret0, _ := ret[0].(environmentdetection.EnvironmentDetectionSettingDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentDetectionSettings indicates an expected call of GetEnvironmentDetectionSettings.
func (mr *MockWSMANerMockRecorder) GetEnvironmentDetectionSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentDetectionSettings", reflect.TypeOf((*MockWSMANer)(nil).GetEnvironmentDetectionSettings))
}

// GetEthernetSettings mocks base method.
func (m *MockWSMANer) GetEthernetSettings() ([]ethernetport.SettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEthernetSettings")
	ret0, _ := ret[0].([]ethernetport.SettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEthernetSettings indicates an expected call of GetEthernetSettings.
func (mr *MockWSMANerMockRecorder) GetEthernetSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEthernetSettings", reflect.TypeOf((*MockWSMANer)(nil).GetEthernetSettings))
}

// GetGeneralSettings mocks base method.
func (m *MockWSMANer) GetGeneralSettings() (general.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneralSettings")
	ret0, _ := ret[0].(general.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneralSettings indicates an expected call of GetGeneralSettings.
func (mr *MockWSMANerMockRecorder) GetGeneralSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneralSettings", reflect.TypeOf((*MockWSMANer)(nil).GetGeneralSettings))
}

// GetHTTPProxy mocks base method.
func (m *MockWSMANer) GetHTTPProxy() (http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPProxy")
	ret0, _ := ret[0].(http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPProxy indicates an expected call of GetHTTPProxy.
func (mr *MockWSMANerMockRecorder) GetHTTPProxy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPProxy", reflect.TypeOf((*MockWSMANer)(nil).GetHTTPProxy))
}

// GetHTTPProxyAccessPoints mocks base method.
func (m *MockWSMANer) GetHTTPProxyAccessPoints() ([]http.HTTPProxyAccessPointItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPProxyAccessPoints")
	ret0, _ := ret[0].([]http.HTTPProxyAccessPointItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPProxyAccessPoints indicates an expected call of GetHTTPProxyAccessPoints.
func (mr *MockWSMANerMockRecorder) GetHTTPProxyAccessPoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPProxyAccessPoints", reflect.TypeOf((*MockWSMANer)(nil).GetHTTPProxyAccessPoints))
}

// GetHostBasedSetupService mocks base method.
func (m *MockWSMANer) GetHostBasedSetupService() (hostbasedsetup.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostBasedSetupService")
	ret0, _ := ret[0].(hostbasedsetup.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostBasedSetupService indicates an expected call of GetHostBasedSetupService.
func (mr *MockWSMANerMockRecorder) GetHostBasedSetupService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostBasedSetupService", reflect.TypeOf((*MockWSMANer)(nil).GetHostBasedSetupService))
}

// GetIPSIEEE8021xSettings mocks base method.
func (m *MockWSMANer) GetIPSIEEE8021xSettings() (ieee8021x.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPSIEEE8021xSettings")
	ret0, _ := ret[0].(ieee8021x.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPSIEEE8021xSettings indicates an expected call of GetIPSIEEE8021xSettings.
func (mr *MockWSMANerMockRecorder) GetIPSIEEE8021xSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPSIEEE8021xSettings", reflect.TypeOf((*MockWSMANer)(nil).GetIPSIEEE8021xSettings))
}

// GetIpsOptInService mocks base method.
func (m *MockWSMANer) GetIpsOptInService() (optin.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIpsOptInService")
	ret0, _ := ret[0].(optin.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpsOptInService indicates an expected call of GetIpsOptInService.
func (mr *MockWSMANerMockRecorder) GetIpsOptInService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpsOptInService", reflect.TypeOf((*MockWSMANer)(nil).GetIpsOptInService))
}

// GetLowAccuracyTimeSynch mocks base method.
func (m *MockWSMANer) GetLowAccuracyTimeSynch() (timesynchronization.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLowAccuracyTimeSynch")
	ret0, _ := ret[0].(timesynchronization.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLowAccuracyTimeSynch indicates an expected call of GetLowAccuracyTimeSynch.
func (mr *MockWSMANerMockRecorder) GetLowAccuracyTimeSynch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLowAccuracyTimeSynch", reflect.TypeOf((*MockWSMANer)(nil).GetLowAccuracyTimeSynch))
}

// GetMPSSAP mocks base method.
func (m *MockWSMANer) GetMPSSAP() ([]managementpresence.ManagementRemoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMPSSAP")
	ret0, _ := ret[0].([]managementpresence.ManagementRemoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMPSSAP indicates an expected call of GetMPSSAP.
func (mr *MockWSMANerMockRecorder) GetMPSSAP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMPSSAP", reflect.TypeOf((*MockWSMANer)(nil).GetMPSSAP))
}

// GetPublicKeyCerts mocks base method.
func (m *MockWSMANer) GetPublicKeyCerts() ([]publickey.RefinedPublicKeyCertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKeyCerts")
	ret0, _ := ret[0].([]publickey.RefinedPublicKeyCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeyCerts indicates an expected call of GetPublicKeyCerts.
func (mr *MockWSMANerMockRecorder) GetPublicKeyCerts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeyCerts", reflect.TypeOf((*MockWSMANer)(nil).GetPublicKeyCerts))
}

// GetPublicPrivateKeyPairs mocks base method.
func (m *MockWSMANer) GetPublicPrivateKeyPairs() ([]publicprivate.RefinedPublicPrivateKeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicPrivateKeyPairs")
	ret0, _ := ret[0].([]publicprivate.RefinedPublicPrivateKeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicPrivateKeyPairs indicates an expected call of GetPublicPrivateKeyPairs.
func (mr *MockWSMANerMockRecorder) GetPublicPrivateKeyPairs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicPrivateKeyPairs", reflect.TypeOf((*MockWSMANer)(nil).GetPublicPrivateKeyPairs))
}

// GetRedirectionService mocks base method.
func (m *MockWSMANer) GetRedirectionService() (redirection.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectionService")
	ret0, _ := ret[0].(redirection.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedirectionService indicates an expected call of GetRedirectionService.
func (mr *MockWSMANerMockRecorder) GetRedirectionService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectionService", reflect.TypeOf((*MockWSMANer)(nil).GetRedirectionService))
}

// GetRemoteAccessPolicies mocks base method.
func (m *MockWSMANer) GetRemoteAccessPolicies() ([]remoteaccess.RemoteAccessPolicyAppliesToMPSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteAccessPolicies")
	ret0, _ := ret[0].([]remoteaccess.RemoteAccessPolicyAppliesToMPSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteAccessPolicies indicates an expected call of GetRemoteAccessPolicies.
func (mr *MockWSMANerMockRecorder) GetRemoteAccessPolicies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAccessPolicies", reflect.TypeOf((*MockWSMANer)(nil).GetRemoteAccessPolicies))
}

// GetSetupAndConfigurationService mocks base method.
func (m *MockWSMANer) GetSetupAndConfigurationService() (setupandconfiguration.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetupAndConfigurationService")
	ret0, _ := ret[0].(setupandconfiguration.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSetupAndConfigurationService indicates an expected call of GetSetupAndConfigurationService.
func (mr *MockWSMANerMockRecorder) GetSetupAndConfigurationService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetupAndConfigurationService", reflect.TypeOf((*MockWSMANer)(nil).GetSetupAndConfigurationService))
}

// GetWiFiSettings mocks base method.
func (m *MockWSMANer) GetWiFiSettings() ([]wifi.WiFiEndpointSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWiFiSettings")
	ret0, _ := ret[0].([]wifi.WiFiEndpointSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWiFiSettings indicates an expected call of GetWiFiSettings.
func (mr *MockWSMANerMockRecorder) GetWiFiSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWiFiSettings", reflect.TypeOf((*MockWSMANer)(nil).GetWiFiSettings))
}

// HostBasedSetupService mocks base method.
func (m *MockWSMANer) HostBasedSetupService(digestRealm, password string) (hostbasedsetup.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostBasedSetupService", digestRealm, password)
	ret0, _ := ret[0].(hostbasedsetup.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostBasedSetupService indicates an expected call of HostBasedSetupService.
func (mr *MockWSMANerMockRecorder) HostBasedSetupService(digestRealm, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostBasedSetupService", reflect.TypeOf((*MockWSMANer)(nil).HostBasedSetupService), digestRealm, password)
}

// HostBasedSetupServiceAdmin mocks base method.
func (m *MockWSMANer) HostBasedSetupServiceAdmin(password, digestRealm string, nonce []byte, signature string, isUpgrade bool) (hostbasedsetup.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostBasedSetupServiceAdmin", password, digestRealm, nonce, signature, isUpgrade)
	ret0, _ := ret[0].(hostbasedsetup.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostBasedSetupServiceAdmin indicates an expected call of HostBasedSetupServiceAdmin.
func (mr *MockWSMANerMockRecorder) HostBasedSetupServiceAdmin(password, digestRealm, nonce, signature, isUpgrade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostBasedSetupServiceAdmin", reflect.TypeOf((*MockWSMANer)(nil).HostBasedSetupServiceAdmin), password, digestRealm, nonce, signature, isUpgrade)
}

// PUTTLSSettings mocks base method.
func (m *MockWSMANer) PUTTLSSettings(instanceID string, tlsSettingData tls0.SettingDataRequest) (tls0.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PUTTLSSettings", instanceID, tlsSettingData)
	ret0, _ := ret[0].(tls0.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PUTTLSSettings indicates an expected call of PUTTLSSettings.
func (mr *MockWSMANerMockRecorder) PUTTLSSettings(instanceID, tlsSettingData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUTTLSSettings", reflect.TypeOf((*MockWSMANer)(nil).PUTTLSSettings), instanceID, tlsSettingData)
}

// PartialUnprovision mocks base method.
func (m *MockWSMANer) PartialUnprovision() (setupandconfiguration.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUnprovision")
	ret0, _ := ret[0].(setupandconfiguration.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUnprovision indicates an expected call of PartialUnprovision.
func (mr *MockWSMANerMockRecorder) PartialUnprovision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUnprovision", reflect.TypeOf((*MockWSMANer)(nil).PartialUnprovision))
}

// PullTLSSettingData mocks base method.
func (m *MockWSMANer) PullTLSSettingData(enumerationContext string) (tls0.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullTLSSettingData", enumerationContext)
	ret0, _ := ret[0].(tls0.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullTLSSettingData indicates an expected call of PullTLSSettingData.
func (mr *MockWSMANerMockRecorder) PullTLSSettingData(enumerationContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullTLSSettingData", reflect.TypeOf((*MockWSMANer)(nil).PullTLSSettingData), enumerationContext)
}

// PutEnvironmentDetectionSettings mocks base method.
func (m *MockWSMANer) PutEnvironmentDetectionSettings(environmentDetectionSettingData environmentdetection.EnvironmentDetectionSettingDataRequest) (environmentdetection.EnvironmentDetectionSettingDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEnvironmentDetectionSettings", environmentDetectionSettingData)
	ret0, _ := ret[0].(environmentdetection.EnvironmentDetectionSettingDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEnvironmentDetectionSettings indicates an expected call of PutEnvironmentDetectionSettings.
func (mr *MockWSMANerMockRecorder) PutEnvironmentDetectionSettings(environmentDetectionSettingData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEnvironmentDetectionSettings", reflect.TypeOf((*MockWSMANer)(nil).PutEnvironmentDetectionSettings), environmentDetectionSettingData)
}

// PutEthernetSettings mocks base method.
func (m *MockWSMANer) PutEthernetSettings(ethernetPortSettings ethernetport.SettingsRequest, instanceId string) (ethernetport.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutEthernetSettings", ethernetPortSettings, instanceId)
	ret0, _ := ret[0].(ethernetport.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutEthernetSettings indicates an expected call of PutEthernetSettings.
func (mr *MockWSMANerMockRecorder) PutEthernetSettings(ethernetPortSettings, instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEthernetSettings", reflect.TypeOf((*MockWSMANer)(nil).PutEthernetSettings), ethernetPortSettings, instanceId)
}

// PutGeneralSettings mocks base method.
func (m *MockWSMANer) PutGeneralSettings(request general.GeneralSettingsRequest) (general.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGeneralSettings", request)
	ret0, _ := ret[0].(general.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGeneralSettings indicates an expected call of PutGeneralSettings.
func (mr *MockWSMANerMockRecorder) PutGeneralSettings(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGeneralSettings", reflect.TypeOf((*MockWSMANer)(nil).PutGeneralSettings), request)
}

// PutIPSIEEE8021xSettings mocks base method.
func (m *MockWSMANer) PutIPSIEEE8021xSettings(ieee8021xSettings ieee8021x.IEEE8021xSettingsRequest) (ieee8021x.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutIPSIEEE8021xSettings", ieee8021xSettings)
	ret0, _ := ret[0].(ieee8021x.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIPSIEEE8021xSettings indicates an expected call of PutIPSIEEE8021xSettings.
func (mr *MockWSMANerMockRecorder) PutIPSIEEE8021xSettings(ieee8021xSettings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIPSIEEE8021xSettings", reflect.TypeOf((*MockWSMANer)(nil).PutIPSIEEE8021xSettings), ieee8021xSettings)
}

// PutIpsOptInService mocks base method.
func (m *MockWSMANer) PutIpsOptInService(request optin.OptInServiceRequest) (optin.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutIpsOptInService", request)
	ret0, _ := ret[0].(optin.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutIpsOptInService indicates an expected call of PutIpsOptInService.
func (mr *MockWSMANerMockRecorder) PutIpsOptInService(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutIpsOptInService", reflect.TypeOf((*MockWSMANer)(nil).PutIpsOptInService), request)
}

// PutRedirectionState mocks base method.
func (m *MockWSMANer) PutRedirectionState(requestedState *redirection.RedirectionRequest) (redirection.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRedirectionState", requestedState)
	ret0, _ := ret[0].(redirection.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRedirectionState indicates an expected call of PutRedirectionState.
func (mr *MockWSMANerMockRecorder) PutRedirectionState(requestedState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRedirectionState", reflect.TypeOf((*MockWSMANer)(nil).PutRedirectionState), requestedState)
}

// PutRemoteAccessPolicyAppliesToMPS mocks base method.
func (m *MockWSMANer) PutRemoteAccessPolicyAppliesToMPS(policy remoteaccess.RemoteAccessPolicyAppliesToMPSResponse) (remoteaccess.Body, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRemoteAccessPolicyAppliesToMPS", policy)
	ret0, _ := ret[0].(remoteaccess.Body)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRemoteAccessPolicyAppliesToMPS indicates an expected call of PutRemoteAccessPolicyAppliesToMPS.
func (mr *MockWSMANerMockRecorder) PutRemoteAccessPolicyAppliesToMPS(policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRemoteAccessPolicyAppliesToMPS", reflect.TypeOf((*MockWSMANer)(nil).PutRemoteAccessPolicyAppliesToMPS), policy)
}

// PutTLSCredentialContext mocks base method.
func (m *MockWSMANer) PutTLSCredentialContext(certHandle string) (tls0.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutTLSCredentialContext", certHandle)
	ret0, _ := ret[0].(tls0.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTLSCredentialContext indicates an expected call of PutTLSCredentialContext.
func (mr *MockWSMANerMockRecorder) PutTLSCredentialContext(certHandle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTLSCredentialContext", reflect.TypeOf((*MockWSMANer)(nil).PutTLSCredentialContext), certHandle)
}

// RemoveMPSSAP mocks base method.
func (m *MockWSMANer) RemoveMPSSAP(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMPSSAP", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMPSSAP indicates an expected call of RemoveMPSSAP.
func (mr *MockWSMANerMockRecorder) RemoveMPSSAP(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMPSSAP", reflect.TypeOf((*MockWSMANer)(nil).RemoveMPSSAP), name)
}

// RemoveRemoteAccessPolicyRules mocks base method.
func (m *MockWSMANer) RemoveRemoteAccessPolicyRules() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRemoteAccessPolicyRules")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRemoteAccessPolicyRules indicates an expected call of RemoveRemoteAccessPolicyRules.
func (mr *MockWSMANerMockRecorder) RemoveRemoteAccessPolicyRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRemoteAccessPolicyRules", reflect.TypeOf((*MockWSMANer)(nil).RemoveRemoteAccessPolicyRules))
}

// RequestKVMStateChange mocks base method.
func (m *MockWSMANer) RequestKVMStateChange(requestedState kvm.KVMRedirectionSAPRequestStateChangeInput) (kvm.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestKVMStateChange", requestedState)
	ret0, _ := ret[0].(kvm.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestKVMStateChange indicates an expected call of RequestKVMStateChange.
func (mr *MockWSMANerMockRecorder) RequestKVMStateChange(requestedState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestKVMStateChange", reflect.TypeOf((*MockWSMANer)(nil).RequestKVMStateChange), requestedState)
}

// RequestRedirectionStateChange mocks base method.
func (m *MockWSMANer) RequestRedirectionStateChange(requestedState redirection.RequestedState) (redirection.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestRedirectionStateChange", requestedState)
	ret0, _ := ret[0].(redirection.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestRedirectionStateChange indicates an expected call of RequestRedirectionStateChange.
func (mr *MockWSMANerMockRecorder) RequestRedirectionStateChange(requestedState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestRedirectionStateChange", reflect.TypeOf((*MockWSMANer)(nil).RequestRedirectionStateChange), requestedState)
}

// RequestStateChangeCIRA mocks base method.
func (m *MockWSMANer) RequestStateChangeCIRA() (userinitiatedconnection.RequestStateChange_OUTPUT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestStateChangeCIRA")
	ret0, _ := ret[0].(userinitiatedconnection.RequestStateChange_OUTPUT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestStateChangeCIRA indicates an expected call of RequestStateChangeCIRA.
func (mr *MockWSMANerMockRecorder) RequestStateChangeCIRA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestStateChangeCIRA", reflect.TypeOf((*MockWSMANer)(nil).RequestStateChangeCIRA))
}

// SetHighAccuracyTimeSynch mocks base method.
func (m *MockWSMANer) SetHighAccuracyTimeSynch(ta0, tm1, tm2 int64) (timesynchronization.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHighAccuracyTimeSynch", ta0, tm1, tm2)
	ret0, _ := ret[0].(timesynchronization.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetHighAccuracyTimeSynch indicates an expected call of SetHighAccuracyTimeSynch.
func (mr *MockWSMANerMockRecorder) SetHighAccuracyTimeSynch(ta0, tm1, tm2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHighAccuracyTimeSynch", reflect.TypeOf((*MockWSMANer)(nil).SetHighAccuracyTimeSynch), ta0, tm1, tm2)
}

// SetIPSIEEE8021xCertificates mocks base method.
func (m *MockWSMANer) SetIPSIEEE8021xCertificates(serverCertificateIssuer, clientCertificate string) (ieee8021x.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIPSIEEE8021xCertificates", serverCertificateIssuer, clientCertificate)
	ret0, _ := ret[0].(ieee8021x.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetIPSIEEE8021xCertificates indicates an expected call of SetIPSIEEE8021xCertificates.
func (mr *MockWSMANerMockRecorder) SetIPSIEEE8021xCertificates(serverCertificateIssuer, clientCertificate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIPSIEEE8021xCertificates", reflect.TypeOf((*MockWSMANer)(nil).SetIPSIEEE8021xCertificates), serverCertificateIssuer, clientCertificate)
}

// SetupMEBX mocks base method.
func (m *MockWSMANer) SetupMEBX(arg0 string) (setupandconfiguration.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupMEBX", arg0)
	ret0, _ := ret[0].(setupandconfiguration.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupMEBX indicates an expected call of SetupMEBX.
func (mr *MockWSMANerMockRecorder) SetupMEBX(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupMEBX", reflect.TypeOf((*MockWSMANer)(nil).SetupMEBX), arg0)
}

// SetupWsmanClient mocks base method.
func (m *MockWSMANer) SetupWsmanClient(username, password string, useTLS, logAMTMessages bool, tlsConfig *tls.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupWsmanClient", username, password, useTLS, logAMTMessages, tlsConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupWsmanClient indicates an expected call of SetupWsmanClient.
func (mr *MockWSMANerMockRecorder) SetupWsmanClient(username, password, useTLS, logAMTMessages, tlsConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupWsmanClient", reflect.TypeOf((*MockWSMANer)(nil).SetupWsmanClient), username, password, useTLS, logAMTMessages, tlsConfig)
}

// Unprovision mocks base method.
func (m *MockWSMANer) Unprovision(arg0 int) (setupandconfiguration.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unprovision", arg0)
	ret0, _ := ret[0].(setupandconfiguration.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unprovision indicates an expected call of Unprovision.
func (mr *MockWSMANerMockRecorder) Unprovision(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unprovision", reflect.TypeOf((*MockWSMANer)(nil).Unprovision), arg0)
}

// UpdateAMTPassword mocks base method.
func (m *MockWSMANer) UpdateAMTPassword(passwordBase64 string) (authorization.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAMTPassword", passwordBase64)
	ret0, _ := ret[0].(authorization.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAMTPassword indicates an expected call of UpdateAMTPassword.
func (mr *MockWSMANerMockRecorder) UpdateAMTPassword(passwordBase64 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAMTPassword", reflect.TypeOf((*MockWSMANer)(nil).UpdateAMTPassword), passwordBase64)
}
