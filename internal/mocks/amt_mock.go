// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/amt/commands.go
//
// Generated by this command:
//
//	mockgen -source ./internal/amt/commands.go -destination ./internal/mocks/amt_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	amt "github.com/device-management-toolkit/rpc-go/v2/internal/amt"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
	isgomock struct{}
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DisableAMT mocks base method.
func (m *MockInterface) DisableAMT() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAMT")
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableAMT indicates an expected call of DisableAMT.
func (mr *MockInterfaceMockRecorder) DisableAMT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAMT", reflect.TypeOf((*MockInterface)(nil).DisableAMT))
}

// EnableAMT mocks base method.
func (m *MockInterface) EnableAMT() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAMT")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableAMT indicates an expected call of EnableAMT.
func (mr *MockInterfaceMockRecorder) EnableAMT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAMT", reflect.TypeOf((*MockInterface)(nil).EnableAMT))
}

// GetCertificateHashes mocks base method.
func (m *MockInterface) GetCertificateHashes() ([]amt.CertHashEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateHashes")
	ret0, _ := ret[0].([]amt.CertHashEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateHashes indicates an expected call of GetCertificateHashes.
func (mr *MockInterfaceMockRecorder) GetCertificateHashes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateHashes", reflect.TypeOf((*MockInterface)(nil).GetCertificateHashes))
}

// GetChangeEnabled mocks base method.
func (m *MockInterface) GetChangeEnabled() (amt.ChangeEnabledResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangeEnabled")
	ret0, _ := ret[0].(amt.ChangeEnabledResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangeEnabled indicates an expected call of GetChangeEnabled.
func (mr *MockInterfaceMockRecorder) GetChangeEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangeEnabled", reflect.TypeOf((*MockInterface)(nil).GetChangeEnabled))
}

// GetControlMode mocks base method.
func (m *MockInterface) GetControlMode() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetControlMode")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetControlMode indicates an expected call of GetControlMode.
func (mr *MockInterfaceMockRecorder) GetControlMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetControlMode", reflect.TypeOf((*MockInterface)(nil).GetControlMode))
}

// GetDNSSuffix mocks base method.
func (m *MockInterface) GetDNSSuffix() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSSuffix")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSSuffix indicates an expected call of GetDNSSuffix.
func (mr *MockInterfaceMockRecorder) GetDNSSuffix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSSuffix", reflect.TypeOf((*MockInterface)(nil).GetDNSSuffix))
}

// GetLANInterfaceSettings mocks base method.
func (m *MockInterface) GetLANInterfaceSettings(useWireless bool) (amt.InterfaceSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLANInterfaceSettings", useWireless)
	ret0, _ := ret[0].(amt.InterfaceSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLANInterfaceSettings indicates an expected call of GetLANInterfaceSettings.
func (mr *MockInterfaceMockRecorder) GetLANInterfaceSettings(useWireless any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLANInterfaceSettings", reflect.TypeOf((*MockInterface)(nil).GetLANInterfaceSettings), useWireless)
}

// GetLocalSystemAccount mocks base method.
func (m *MockInterface) GetLocalSystemAccount() (amt.LocalSystemAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalSystemAccount")
	ret0, _ := ret[0].(amt.LocalSystemAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalSystemAccount indicates an expected call of GetLocalSystemAccount.
func (mr *MockInterfaceMockRecorder) GetLocalSystemAccount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalSystemAccount", reflect.TypeOf((*MockInterface)(nil).GetLocalSystemAccount))
}

// GetOSDNSSuffix mocks base method.
func (m *MockInterface) GetOSDNSSuffix() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSDNSSuffix")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSDNSSuffix indicates an expected call of GetOSDNSSuffix.
func (mr *MockInterfaceMockRecorder) GetOSDNSSuffix() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSDNSSuffix", reflect.TypeOf((*MockInterface)(nil).GetOSDNSSuffix))
}

// GetRemoteAccessConnectionStatus mocks base method.
func (m *MockInterface) GetRemoteAccessConnectionStatus() (amt.RemoteAccessStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteAccessConnectionStatus")
	ret0, _ := ret[0].(amt.RemoteAccessStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteAccessConnectionStatus indicates an expected call of GetRemoteAccessConnectionStatus.
func (mr *MockInterfaceMockRecorder) GetRemoteAccessConnectionStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAccessConnectionStatus", reflect.TypeOf((*MockInterface)(nil).GetRemoteAccessConnectionStatus))
}

// GetUUID mocks base method.
func (m *MockInterface) GetUUID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockInterfaceMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockInterface)(nil).GetUUID))
}

// GetVersionDataFromME mocks base method.
func (m *MockInterface) GetVersionDataFromME(key string, amtTimeout time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionDataFromME", key, amtTimeout)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionDataFromME indicates an expected call of GetVersionDataFromME.
func (mr *MockInterfaceMockRecorder) GetVersionDataFromME(key, amtTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionDataFromME", reflect.TypeOf((*MockInterface)(nil).GetVersionDataFromME), key, amtTimeout)
}

// Initialize mocks base method.
func (m *MockInterface) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockInterfaceMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockInterface)(nil).Initialize))
}

// StartConfigurationHBased mocks base method.
func (m *MockInterface) StartConfigurationHBased(params amt.SecureHBasedParameters) (amt.SecureHBasedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartConfigurationHBased", params)
	ret0, _ := ret[0].(amt.SecureHBasedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartConfigurationHBased indicates an expected call of StartConfigurationHBased.
func (mr *MockInterfaceMockRecorder) StartConfigurationHBased(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartConfigurationHBased", reflect.TypeOf((*MockInterface)(nil).StartConfigurationHBased), params)
}

// Unprovision mocks base method.
func (m *MockInterface) Unprovision() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unprovision")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unprovision indicates an expected call of Unprovision.
func (mr *MockInterfaceMockRecorder) Unprovision() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unprovision", reflect.TypeOf((*MockInterface)(nil).Unprovision))
}
